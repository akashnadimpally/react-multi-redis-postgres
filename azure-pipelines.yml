# Docker
# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# trigger:
# - master

resources:
- repo: self

variables:
  # tag: '$(Build.BuildId)'
  tag: 'latest'
  agent_name: 'myadminuser'

stages:
- stage: BuildNonProd
  displayName: Build NonProd Client image
  jobs:
  - job: BuildNonProd
    displayName: Build Non-Prod Client image
    pool:
      name: docker_agent_pool
      demands:
        - agent.name -equals $(agent_name)
    steps:
    - task: Docker@2
      displayName: Build the client image for dev
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'akashskynet009/react-multi-client'
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/client/Dockerfile.dev'
        tags: 'dev_$(tag)'

    - task: Bash@3
      displayName: Test the Image
      inputs:
        targetType: 'inline'
        script: |
          # Write your commands here
          
          # npm install
          # npm install react-scripts
          docker run --rm -p 5000:3000 akashskynet009/react-multi-client:dev_$(tag) sh -c "npm start & npm test -- --watchAll=false"

    # - task: Docker@2
    #   displayName: Push the image
    #   inputs:
    #     containerRegistry: 'DockerHub'
    #     repository: 'akashskynet009/react-multi-client'
    #     command: 'push'
    #     Dockerfile: '$(Build.SourcesDirectory)/client/Dockerfile.dev'
    #     tags: 'dev_$(tag)'

    - task: AmazonWebServices.aws-vsts-tools.ECRPushImage.ECRPushImage@1
      displayName: 'Push Image: Client'
      inputs:
        awsCredentials: AWS
        regionName: 'us-west-1'
        sourceImageName: 'akashskynet009/react-multi-client'
        sourceImageTag: 'dev_$(tag)'
        repositoryName: 'react-multi-client'
        pushTag: 'dev_$(tag)'
        autoCreateRepository: true
        forceDockerNamingConventions: true

- stage: BuildProd
  displayName: Build Prod Client, Nginx, Server, and Worker images
  jobs:
  - job: BuildProd
    displayName: Build Prod images
    pool:
      name: docker_agent_pool
      demands:
        - agent.name -equals $(agent_name)
    steps:
    - task: Docker@2
      displayName: Build the Client image
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'akashskynet009/react-multi-client'
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/client/Dockerfile'
        tags: $(tag)
    - task: Docker@2
      displayName: Build the Nginx image
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'akashskynet009/react-multi-nginx'
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/nginx/Dockerfile'
        tags: $(tag)
    - task: Docker@2
      displayName: Build the Server image
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'akashskynet009/react-multi-server'
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/server/Dockerfile'
        tags: $(tag)
    - task: Docker@2
      displayName: Build the Worker image
      inputs:
        containerRegistry: 'DockerHub'
        repository: 'akashskynet009/react-multi-worker'
        command: 'build'
        Dockerfile: '$(Build.SourcesDirectory)/worker/Dockerfile'
        tags: $(tag)
    - task: AmazonWebServices.aws-vsts-tools.ECRPushImage.ECRPushImage@1
      displayName: 'Push Image: Client'
      inputs:
        awsCredentials: AWS
        regionName: 'us-west-1'
        sourceImageName: 'akashskynet009/react-multi-client'
        sourceImageTag: '$(tag)'
        repositoryName: 'react-multi-client'
        pushTag: '$(tag)'
        autoCreateRepository: true
        forceDockerNamingConventions: true
    - task: AmazonWebServices.aws-vsts-tools.ECRPushImage.ECRPushImage@1
      displayName: 'Push Image: Nginx'
      inputs:
        awsCredentials: AWS
        regionName: 'us-west-1'
        sourceImageName: 'akashskynet009/react-multi-nginx'
        sourceImageTag: '$(tag)'
        repositoryName: 'react-multi-nginx'
        pushTag: '$(tag)'
        autoCreateRepository: true
        forceDockerNamingConventions: true
    - task: AmazonWebServices.aws-vsts-tools.ECRPushImage.ECRPushImage@1
      displayName: 'Push Image: server'
      inputs:
        awsCredentials: AWS
        regionName: 'us-west-1'
        sourceImageName: 'akashskynet009/react-multi-server'
        sourceImageTag: '$(tag)'
        repositoryName: 'react-multi-server'
        pushTag: '$(tag)'
        autoCreateRepository: true
        forceDockerNamingConventions: true
    - task: AmazonWebServices.aws-vsts-tools.ECRPushImage.ECRPushImage@1
      displayName: 'Push Image: worker'
      inputs:
        awsCredentials: AWS
        regionName: 'us-west-1'
        sourceImageName: 'akashskynet009/react-multi-worker'
        sourceImageTag: '$(tag)'
        repositoryName: 'react-multi-worker'
        pushTag: '$(tag)'
        autoCreateRepository: true
        forceDockerNamingConventions: true


